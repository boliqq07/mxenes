# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, boliqq07
# This file is distributed under the same license as the mxene package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mxene \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-08 01:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../src/mxene.extract.rst:2
msgid "mxene.extract package"
msgstr ""

#: ../../src/mxene.extract.rst:10
msgid "Submodules"
msgstr ""

#: ../../src/mxene.extract.rst:13
msgid "mxene.extract.structure\\_extractor module"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:1
#: mxene.extract.structure_extractor.Tetra:1 of
msgid "基类：:py:class:`object`"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:1 of
msgid "Single Automic Tetra message extractor."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra
#: mxene.extract.structure_extractor.SingleTetra.add_point
#: mxene.extract.structure_extractor.SingleTetra.message
#: mxene.extract.structure_extractor.SingleTetra.set_p4i
#: mxene.extract.structure_extractor.SingleTetra.tetra_sites
#: mxene.extract.structure_extractor.Tetra
#: mxene.extract.structure_extractor.Tetra.message
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites
#: mxene.extract.structure_extractor.Tetra.set_point4
#: mxene.extract.structure_extractor.s012_tetra_sites
#: mxene.extract.structure_extractor.tetra_sites of
msgid "参数"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:3
#: mxene.extract.structure_extractor.Tetra:3 of
msgid "(Structure)"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:4 of
msgid "(int), n_jobs"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:5
#: mxene.extract.structure_extractor.Tetra:5 of
msgid "(int), center index."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:6 of
msgid "(int,list), jump index."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra:7 of
msgid "(str), prefix for name."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.add_point:1 of
msgid "add new point."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.add_point:3
#: mxene.extract.structure_extractor.SingleTetra.add_point:5 of
msgid "(np.ndarray), with shape (3,)"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.add_point:4 of
msgid "(str), name of this point"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.cc:1 of
msgid "for cart-coords"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.estimation_init_cp:1 of
msgid "estimation init c and init p."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.message:1
#: mxene.extract.structure_extractor.Tetra.message:1 of
msgid "Get Tetra message."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.message:3 of
msgid ""
"(np.ndarray), default is None, if specific, the p4i is the 4 index of "
"elements (top,backend1,backend2,backend3)."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.message:4
#: mxene.extract.structure_extractor.Tetra.message:6 of
msgid "(str), default \"dict\", or could be \"pd\"."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.message
#: mxene.extract.structure_extractor.SingleTetra.tetra_sites
#: mxene.extract.structure_extractor.Tetra.message
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites
#: mxene.extract.structure_extractor.s012_tetra_sites
#: mxene.extract.structure_extractor.tetra_sites of
msgid "返回"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.message:6
#: mxene.extract.structure_extractor.Tetra.message:8 of
msgid "(dict, pd.Dateframe)"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.message
#: mxene.extract.structure_extractor.Tetra.message
#: mxene.extract.structure_extractor.s012_tetra_sites
#: mxene.extract.structure_extractor.tetra_sites of
msgid "返回类型"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.preprocess:1
#: mxene.extract.structure_extractor.Tetra.preprocess:1 of
msgid ""
"Re-arrange the rank of 4 points. set the special neighbor point to index "
"1 (the 2ed site)."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.rcc:1 of
msgid "for real_cart-coords, the offset has been add on it."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.set_p4i:1 of
msgid ""
"Set 4 point. please keep the center element in the first!!!. if run_check"
" = \"\", please make sure the tetra msg ndarray manully."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.set_p4i:4 of
msgid ""
"(ArrayLike), if run_check, if specific, the p4i is the 4 index of "
"elements, else pass tetra_msg ndarray"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.set_p4i:6 of
msgid "(\"rank\", \"pymatgen\", \"\"), method to find the offset."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.tetra_sites:1
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites:1 of
msgid "Get neighbor sites of three O's sites."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.tetra_sites:3
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites:3 of
msgid "(str), name"
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.tetra_sites:4 of
msgid "(int), specific the index of O."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.tetra_sites:5
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites:5
#: mxene.extract.structure_extractor.s012_tetra_sites:9
#: mxene.extract.structure_extractor.tetra_sites:9 of
msgid "(float), cut radius."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.tetra_sites:6
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites:6 of
msgid "(float), tolerance."
msgstr ""

#: mxene.extract.structure_extractor.SingleTetra.tetra_sites:8
#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites:8 of
msgid "None"
msgstr ""

#: mxene.extract.structure_extractor.Tetra:1 of
msgid "Tetra message extractor for three O's sites."
msgstr ""

#: mxene.extract.structure_extractor.Tetra:4 of
msgid "(int), n_jobs."
msgstr ""

#: mxene.extract.structure_extractor.Tetra.message:3 of
msgid "(np.ndarray), index of of tera."
msgstr ""

#: mxene.extract.structure_extractor.Tetra.s012_tetra_sites:4 of
msgid "(list). specific the index of O."
msgstr ""

#: mxene.extract.structure_extractor.Tetra.set_point4:1 of
msgid "Set 4 point. please keep the center element in the first!!!."
msgstr ""

#: mxene.extract.structure_extractor.Tetra.set_point4:3 of
msgid ""
"(list of 3 np.ndarray), default is None, if specific, each p4i is the 4 "
"index of elements."
msgstr ""

#: mxene.extract.structure_extractor.Tetra.set_point4:4 of
msgid "(str), method to find the offset."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:1 of
msgid "Get tetra sites (4 sites) of three O's sites: S0,S1,S2."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:3
#: mxene.extract.structure_extractor.tetra_sites:3 of
msgid "(Structure), pymatgen structure."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:4
#: mxene.extract.structure_extractor.tetra_sites:4 of
msgid "(str), base metal name."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:5
#: mxene.extract.structure_extractor.tetra_sites:5 of
msgid "(int), index of center element. None is automatic judgement."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:6 of
msgid ""
"(list), list of all top site indexes of tetra (such as for three O "
"atoms). specific the index of O manually. None is automatic judgement."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:8
#: mxene.extract.structure_extractor.tetra_sites:8 of
msgid "(bool), return type, default numpy. or could be dict."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:10
#: mxene.extract.structure_extractor.tetra_sites:10 of
msgid "(int,list), jump index for judge center. such as adsorbed atoms."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:11
#: mxene.extract.structure_extractor.tetra_sites:11 of
msgid "(float), tolerance to find neighbor."
msgstr ""

#: mxene.extract.structure_extractor.s012_tetra_sites:13 of
msgid ""
"(dict,np.ndarray), if np.ndarray : for each line with shape(20,) [center "
"(1),neighbors(3), distance_c_vs_n (4*1=4),offset(4*3=12)]."
msgstr ""

#: mxene.extract.structure_extractor.structure_message:1 of
msgid "Get message by Tetra just for single doping MXenes."
msgstr ""

#: mxene.extract.structure_extractor.tetra_sites:1 of
msgid "Get tetra sites (4 sites) of one O."
msgstr ""

#: mxene.extract.structure_extractor.tetra_sites:6 of
msgid "(int,), specific the index of O manually."
msgstr ""

#: mxene.extract.structure_extractor.tetra_sites:13 of
msgid ""
"(dict), if np.ndarray, shape(20,) [center "
"(1),neighbors(3),distance_c_vs_n (4*1=4),offset(4*3=12)]."
msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid "Single Automic Tetra message extractor."
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "(Structure)"
#~ msgstr ""

#~ msgid "(int), n_jobs"
#~ msgstr ""

#~ msgid "(int), center index."
#~ msgstr ""

#~ msgid "(int,list), jump index."
#~ msgstr ""

#~ msgid "(str), prefix for name."
#~ msgstr ""

#~ msgid "add new point."
#~ msgstr ""

#~ msgid "(np.ndarray), with shape (3,)"
#~ msgstr ""

#~ msgid "(str), name of this point"
#~ msgstr ""

#~ msgid "for cart-coords"
#~ msgstr ""

#~ msgid "estimation init c and init p."
#~ msgstr ""

#~ msgid "Get Tetra message."
#~ msgstr ""

#~ msgid ""
#~ "(np.ndarray), default is None, if "
#~ "specific, the p4i is the 4 index"
#~ " of elements (top,backend1,backend2,backend3)."
#~ msgstr ""

#~ msgid "(str), default \"dict\", or could be \"pd\"."
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "(dict, pd.Dateframe)"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid ""
#~ "Re-arrange the rank of 4 points."
#~ " set the special neighbor point to"
#~ " index 1 (the 2ed site)."
#~ msgstr ""

#~ msgid "for real_cart-coords, the offset has been add on it."
#~ msgstr ""

#~ msgid ""
#~ "Set 4 point. please keep the "
#~ "center element in the first!!!. if "
#~ "run_check = \"\", please make sure "
#~ "the tetra msg ndarray manully."
#~ msgstr ""

#~ msgid ""
#~ "(ArrayLike), if run_check, if specific, "
#~ "the p4i is the 4 index of "
#~ "elements, else pass tetra_msg ndarray"
#~ msgstr ""

#~ msgid "(\"rank\", \"pymatgen\", \"\"), method to find the offset."
#~ msgstr ""

#~ msgid "Get neighbor sites of three O's sites."
#~ msgstr ""

#~ msgid "(str), name"
#~ msgstr ""

#~ msgid "(int), specific the index of O."
#~ msgstr ""

#~ msgid "(float), cut radius."
#~ msgstr ""

#~ msgid "(float), tolerance."
#~ msgstr ""

#~ msgid "None"
#~ msgstr ""

#~ msgid "Tetra message extractor for three O's sites."
#~ msgstr ""

#~ msgid "(int), n_jobs."
#~ msgstr ""

#~ msgid "(np.ndarray), index of of tera."
#~ msgstr ""

#~ msgid "(list). specific the index of O."
#~ msgstr ""

#~ msgid "Set 4 point. please keep the center element in the first!!!."
#~ msgstr ""

#~ msgid ""
#~ "(list of 3 np.ndarray), default is "
#~ "None, if specific, each p4i is the"
#~ " 4 index of elements."
#~ msgstr ""

#~ msgid "(str), method to find the offset."
#~ msgstr ""

#~ msgid "Get tetra sites (4 sites) of three O's sites: S0,S1,S2."
#~ msgstr ""

#~ msgid "(Structure), pymatgen structure."
#~ msgstr ""

#~ msgid "(str), base metal name."
#~ msgstr ""

#~ msgid "(int), index of center element. None is automatic judgement."
#~ msgstr ""

#~ msgid ""
#~ "(list), list of all top site "
#~ "indexes of tetra (such as for "
#~ "three O atoms). specific the index "
#~ "of O manually. None is automatic "
#~ "judgement."
#~ msgstr ""

#~ msgid "(bool), return type, default numpy. or could be dict."
#~ msgstr ""

#~ msgid "(int,list), jump index for judge center. such as adsorbed atoms."
#~ msgstr ""

#~ msgid "(float), tolerance to find neighbor."
#~ msgstr ""

#~ msgid ""
#~ "(dict,np.ndarray), if np.ndarray : for "
#~ "each line with shape(20,) [center "
#~ "(1),neighbors(3), distance_c_vs_n (4*1=4),offset(4*3=12)]."
#~ msgstr ""

#~ msgid "Get message by Tetra just for single doping MXenes."
#~ msgstr ""

#~ msgid "Get tetra sites (4 sites) of one O."
#~ msgstr ""

#~ msgid "(int,), specific the index of O manually."
#~ msgstr ""

#~ msgid ""
#~ "(dict), if np.ndarray, shape(20,) [center "
#~ "(1),neighbors(3),distance_c_vs_n (4*1=4),offset(4*3=12)]."
#~ msgstr ""

#~ msgid "Bases: :class:`object`"
#~ msgstr ""

#~ msgid "基类：:class:`object`"
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

