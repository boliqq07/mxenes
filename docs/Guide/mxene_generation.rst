Generation
==================

mxene includes some tools for batch generation of mxene structures and extraction of crystal structure features, which
can be used as the input of VASP for subsequent calculation, and can also analyze and extract some calculation results
to achieve data mining in universities. In addition, mxene can also be used to check the rationality of vasp calculation
process and results.

Generate MXene Structural Data
:::::::::::::::::::::::::::::::::

The crystal structure data generated by mxene includes three methods:

**Usage:**

1. Starting from layered structure, customize structural elements, number of layers, supercell size, etc.

    >>> from mxene.core.mxenes import MXene
    >>> from pymatgen.io.vasp import Poscar
    >>> structures = MXene.from_standard(terminal_site='fcc', terminal="O", base="Ti")

2. Read and generate from the existing poscar file.

    >>> structures = MXene.from_file('POSCAR')

3. Read the existing POSCAR and convert it to ``Structure`` through pymatgen, and convert it to ``MXene`` sequentially.

    >>> pos = Poscar.from_file('POSCAR')
    >>> st = pos.structure
    >>> structures = MXene.from_structure(st)

.. note::

    The 2 and 3 methods are inherited from ``structure``.

VASP input
:::::::::::::::::::::::::::::::::

This package can be used to generate VASP inputs easily.
The files are "POSCAR","INCAR","KPOINTS","POTCAR","pbs.run" .etc.

Examples:

# POSCAR
>>> from mxene.core.mxenes import MXene
>>> from mxene.prepare.vaspinput import MXVaspInput
>>> from pymatgen.io.vasp.inputs import Poscar
>>> structure = MXene.from_standard(terminal_site='fcc', terminal="O", base="Ti")
>>> poscar = Poscar(structure)

# POTCAR
>>> sym_potcar_map = check_potcar(potpath=r"POT-database")
>>> potcar = get_potcar(poscar, sym_potcar_map=sym_potcar_map)

# KPOINTS
>>> from pymatgen.io.vasp import Kpoints
>>> kpoints = Kpoints(kpts=((3, 3, 1),))

# INCAR
>>> from mxene.prepare.conf_files import opt_incar
>>> from pymatgen.io.vasp import Incar
>>> incar = Incar.from_string(opt_incar)

# ALL
>>> mxinput = MXVaspInput(incar, kpoints, poscar, potcar, optional_files=None, **kwargs)
>>> mxinput.write_input(output_dir=".",make_dir_if_not_present=True)